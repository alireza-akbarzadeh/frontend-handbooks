---
import DocLayout from '../../../layouts/DocLayout.astro';
import { getCollection } from 'astro:content';
import type { Doc } from '../../../types/docs';

// Generate all possible category/slug combinations
export async function getStaticPaths() {
  const allDocs = await getCollection('docs');

  return allDocs.map((entry: Doc) => {
    const [category, slug] = entry.slug.split('/');
    return {
      params: { category, slug },
      props: { entry }
    };
  });
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const { category, slug } = Astro.params;

// Find related docs
const relatedDocs = await getCollection('docs', (doc: Doc) => {
  // Don't include the current doc
  if (doc.id === entry.id) return false;

  // Include docs from the same category
  if (doc.slug.startsWith(`${category}/`)) return true;

  // Include docs that are listed in relatedTopics
  const relatedTopics = entry.data.relatedTopics;
  if (relatedTopics) {
    const categoryKeys = Object.keys(relatedTopics);
    for (const key of categoryKeys) {
      const topics = relatedTopics[key];
      if (topics && topics.includes(doc.slug.split('/')[1])) {
        return true;
      }
    }
  }

  return false;
}).then(docs => docs.slice(0, 3));

// Category metadata
const categoryMetadata = {
  javascript: {
    title: 'JavaScript',
    color: 'amber',
    icon: '/icons/javascript.svg'
  },
  html: {
    title: 'HTML',
    color: 'blue',
    icon: '/icons/html.svg'
  },
  css: {
    title: 'CSS',
    color: 'purple',
    icon: '/icons/css.svg'
  },
  git: {
    title: 'Git & GitHub',
    color: 'orange',
    icon: '/icons/git.svg'
  },
  frameworks: {
    title: 'Frameworks',
    color: 'emerald',
    icon: '/icons/frameworks.svg'
  },
  tools: {
    title: 'Developer Tools',
    color: 'slate',
    icon: '/icons/tools.svg'
  }
};

// Fallback for categories not in the metadata
const currentCategoryMeta = categoryMetadata[category] || {
  title: category.charAt(0).toUpperCase() + category.slice(1),
  color: 'gray',
  icon: '/icons/default.svg'
};
---

<DocLayout
    title={entry.data.title}
    description={entry.data.description}
    currentPath={`/docs/${entry.slug}`}
    tableOfContents={headings}
>
  <div class="mb-8">
    <div class="flex items-center gap-2 mb-2 text-sm text-slate-500 dark:text-slate-400">
      <a href="/docs" class="hover:text-blue-600 dark:hover:text-blue-400">Docs</a>
      <span>/</span>
      <a
          href={`/docs/${category}`}
          class={`hover:text-${currentCategoryMeta.color}-600 dark:hover:text-${currentCategoryMeta.color}-400`}
      >
        {currentCategoryMeta.title}
      </a>
    </div>

    <h1 class="text-4xl font-bold mb-4">
      {entry.data.title}
    </h1>

    {entry.data.description && (
        <p class="text-xl text-slate-600 dark:text-slate-400 mb-6">
          {entry.data.description}
        </p>
    )}

    <div class="flex flex-wrap items-center gap-4 mb-8 text-sm">
      {entry.data.publishedDate && (
          <div class="flex items-center text-slate-500 dark:text-slate-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
            </svg>
            Published: {new Date(entry.data.publishedDate).toLocaleDateString()}
          </div>
      )}

      {entry.data.updatedDate && (
          <div class="flex items-center text-slate-500 dark:text-slate-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
            </svg>
            Updated: {new Date(entry.data.updatedDate).toLocaleDateString()}
          </div>
      )}

      {entry.data.tags && entry.data.tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map(tag => (
                <a
                    href={`/docs/${category}?tag=${tag}`}
                    class={`px-2 py-1 rounded-full text-xs bg-${currentCategoryMeta.color}-100 dark:bg-${currentCategoryMeta.color}-900/30 text-${currentCategoryMeta.color}-700 dark:text-${currentCategoryMeta.color}-400 hover:bg-${currentCategoryMeta.color}-200 dark:hover:bg-${currentCategoryMeta.color}-900/50 transition-colors`}
                >
                  {tag}
                </a>
            ))}
          </div>
      )}
    </div>
  </div>

  <!-- Content -->
  <article class="prose prose-slate max-w-none dark:prose-invert prose-headings:scroll-mt-24 prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-lg">
    <Content />
  </article>

  <!-- Related Docs -->
  {relatedDocs.length > 0 && (
      <div class="mt-16 pt-8 border-t border-slate-200 dark:border-slate-800">
        <h2 class="text-2xl font-bold mb-6">Related Documentation</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {relatedDocs.map((doc: Doc) => {
            const [docCategory] = doc.slug.split('/');
            const catMeta = categoryMetadata[docCategory] || { color: 'gray' };

            return (
                <a
                    href={`/docs/${doc.slug}`}
                    class={`p-4 rounded-lg border border-slate-200 dark:border-slate-800 hover:border-${catMeta.color}-300 dark:hover:border-${catMeta.color}-800 transition-all bg-white dark:bg-slate-900/50 hover:shadow-md`}
                >
                  <div class="flex items-center gap-2 mb-2">
                    <img src={catMeta.icon} alt="" width="16" height="16" />
                    <span class={`text-sm text-${catMeta.color}-600 dark:text-${catMeta.color}-400`}>
                                    {catMeta.title}
                                </span>
                  </div>
                  <h3 class="font-bold mb-1">
                    {doc.data.title}
                  </h3>
                  {doc.data.description && (
                      <p class="text-sm text-slate-600 dark:text-slate-400 line-clamp-2">
                        {doc.data.description}
                      </p>
                  )}
                </a>
            );
          })}
        </div>
      </div>
  )}

  <!-- Edit Page Link -->
  <div class="mt-16 pt-8 border-t border-slate-200 dark:border-slate-800">
    <div class="flex justify-center">
      <a
          href={`https://github.com/alireza-akbarzadeh/frontend-handbooks/tree/master/src/content/docs/${entry.slug}.mdx`}
          target="_blank"
          class="group inline-flex items-center gap-2 rounded-lg border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-300 shadow-sm hover:shadow-md hover:border-blue-500 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-200"
      >
        <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 text-slate-400 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-colors"
            viewBox="0 0 20 20"
            fill="currentColor"
        >
          <path
              d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"
          />
        </svg>
        <span>Edit this page on GitHub</span>
      </a>
    </div>
  </div>
</DocLayout>